//! GF(256) field implementation using irreducible polynomial 0x11d
//!

use std::ops::{Add, AddAssign, Deref, Div, Mul, Sub};

#[cfg(feature = "zeroize")]
use zeroize::Zeroize;

// Lookup tables for multiplication and exponentiation in GF(2^8) using irreducible polynomial 0x11d
const LOG_TABLE: [u8; 256] = [
    0x00, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1a, 0xc6, 0x03, 0xdf, 0x33, 0xee,
    0x1b, 0x68, 0xc7, 0x4b, 0x04, 0x64, 0xe0, 0x0e, 0x34, 0x8d, 0xef, 0x81,
    0x1c, 0xc1, 0x69, 0xf8, 0xc8, 0x08, 0x4c, 0x71, 0x05, 0x8a, 0x65, 0x2f,
    0xe1, 0x24, 0x0f, 0x21, 0x35, 0x93, 0x8e, 0xda, 0xf0, 0x12, 0x82, 0x45,
    0x1d, 0xb5, 0xc2, 0x7d, 0x6a, 0x27, 0xf9, 0xb9, 0xc9, 0x9a, 0x09, 0x78,
    0x4d, 0xe4, 0x72, 0xa6, 0x06, 0xbf, 0x8b, 0x62, 0x66, 0xdd, 0x30, 0xfd,
    0xe2, 0x98, 0x25, 0xb3, 0x10, 0x91, 0x22, 0x88, 0x36, 0xd0, 0x94, 0xce,
    0x8f, 0x96, 0xdb, 0xbd, 0xf1, 0xd2, 0x13, 0x5c, 0x83, 0x38, 0x46, 0x40,
    0x1e, 0x42, 0xb6, 0xa3, 0xc3, 0x48, 0x7e, 0x6e, 0x6b, 0x3a, 0x28, 0x54,
    0xfa, 0x85, 0xba, 0x3d, 0xca, 0x5e, 0x9b, 0x9f, 0x0a, 0x15, 0x79, 0x2b,
    0x4e, 0xd4, 0xe5, 0xac, 0x73, 0xf3, 0xa7, 0x57, 0x07, 0x70, 0xc0, 0xf7,
    0x8c, 0x80, 0x63, 0x0d, 0x67, 0x4a, 0xde, 0xed, 0x31, 0xc5, 0xfe, 0x18,
    0xe3, 0xa5, 0x99, 0x77, 0x26, 0xb8, 0xb4, 0x7c, 0x11, 0x44, 0x92, 0xd9,
    0x23, 0x20, 0x89, 0x2e, 0x37, 0x3f, 0xd1, 0x5b, 0x95, 0xbc, 0xcf, 0xcd,
    0x90, 0x87, 0x97, 0xb2, 0xdc, 0xfc, 0xbe, 0x61, 0xf2, 0x56, 0xd3, 0xab,
    0x14, 0x2a, 0x5d, 0x9e, 0x84, 0x3c, 0x39, 0x53, 0x47, 0x6d, 0x41, 0xa2,
    0x1f, 0x2d, 0x43, 0xd8, 0xb7, 0x7b, 0xa4, 0x76, 0xc4, 0x17, 0x49, 0xec,
    0x7f, 0x0c, 0x6f, 0xf6, 0x6c, 0xa1, 0x3b, 0x52, 0x29, 0x9d, 0x55, 0xaa,
    0xfb, 0x60, 0x86, 0xb1, 0xbb, 0xcc, 0x3e, 0x5a, 0xcb, 0x59, 0x5f, 0xb0,
    0x9c, 0xa9, 0xa0, 0x51, 0x0b, 0xf5, 0x16, 0xeb, 0x7a, 0x75, 0x2c, 0xd7,
    0x4f, 0xae, 0xd5, 0xe9, 0xe6, 0xe7, 0xad, 0xe8, 0x74, 0xd6, 0xf4, 0xea,
    0xa8, 0x50, 0x58, 0xaf,
];

const EXP_TABLE: [u8; 512] = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d, 0x3a, 0x74, 0xe8,
    0xcd, 0x87, 0x13, 0x26, 0x4c, 0x98, 0x2d, 0x5a, 0xb4, 0x75, 0xea, 0xc9,
    0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x9d, 0x27, 0x4e, 0x9c,
    0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee, 0xc1, 0x9f, 0x23,
    0x46, 0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d, 0xba, 0x69, 0xd2,
    0xb9, 0x6f, 0xde, 0xa1, 0x5f, 0xbe, 0x61, 0xc2, 0x99, 0x2f, 0x5e, 0xbc,
    0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0, 0xfd, 0xe7, 0xd3, 0xbb,
    0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b, 0xb6, 0x71, 0xe2,
    0xd9, 0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d, 0x1a, 0x34, 0x68,
    0xd0, 0xbd, 0x67, 0xce, 0x81, 0x1f, 0x3e, 0x7c, 0xf8, 0xed, 0xc7, 0x93,
    0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc, 0x85, 0x17, 0x2e, 0x5c,
    0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84, 0x15, 0x2a, 0x54,
    0xa8, 0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49, 0x92, 0x39, 0x72,
    0xe4, 0xd5, 0xb7, 0x73, 0xe6, 0xd1, 0xbf, 0x63, 0xc6, 0x91, 0x3f, 0x7e,
    0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff, 0xe3, 0xdb, 0xab, 0x4b,
    0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5, 0x57, 0xae, 0x41,
    0x82, 0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0,
    0xdd, 0xa7, 0x53, 0xa6, 0x51, 0xa2, 0x59, 0xb2, 0x79, 0xf2, 0xf9, 0xef,
    0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09, 0x12, 0x24, 0x48, 0x90,
    0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb, 0x8b, 0x0b, 0x16,
    0x2c, 0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b, 0x36, 0x6c, 0xd8,
    0xad, 0x47, 0x8e, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d,
    0x3a, 0x74, 0xe8, 0xcd, 0x87, 0x13, 0x26, 0x4c, 0x98, 0x2d, 0x5a, 0xb4,
    0x75, 0xea, 0xc9, 0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x9d,
    0x27, 0x4e, 0x9c, 0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee,
    0xc1, 0x9f, 0x23, 0x46, 0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d,
    0xba, 0x69, 0xd2, 0xb9, 0x6f, 0xde, 0xa1, 0x5f, 0xbe, 0x61, 0xc2, 0x99,
    0x2f, 0x5e, 0xbc, 0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0, 0xfd,
    0xe7, 0xd3, 0xbb, 0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b,
    0xb6, 0x71, 0xe2, 0xd9, 0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d,
    0x1a, 0x34, 0x68, 0xd0, 0xbd, 0x67, 0xce, 0x81, 0x1f, 0x3e, 0x7c, 0xf8,
    0xed, 0xc7, 0x93, 0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc, 0x85,
    0x17, 0x2e, 0x5c, 0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84,
    0x15, 0x2a, 0x54, 0xa8, 0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49,
    0x92, 0x39, 0x72, 0xe4, 0xd5, 0xb7, 0x73, 0xe6, 0xd1, 0xbf, 0x63, 0xc6,
    0x91, 0x3f, 0x7e, 0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff, 0xe3,
    0xdb, 0xab, 0x4b, 0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5,
    0x57, 0xae, 0x41, 0x82, 0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c,
    0x38, 0x70, 0xe0, 0xdd, 0xa7, 0x53, 0xa6, 0x51, 0xa2, 0x59, 0xb2, 0x79,
    0xf2, 0xf9, 0xef, 0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09, 0x12,
    0x24, 0x48, 0x90, 0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb,
    0x8b, 0x0b, 0x16, 0x2c, 0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b,
    0x36, 0x6c, 0xd8, 0xad, 0x47, 0x8e, 0x01, 0x02,
];

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Gf256(pub u8);

impl Gf256 {
    pub const ZERO: Gf256 = Gf256(0);
    pub const ONE: Gf256 = Gf256(1);

    pub fn inv(&self) -> Option<Gf256> {
        if self.0 == 0 {
            None
        } else {
            Some(exp(255 - log(self.0)))
        }
    }
}

fn exp(n: u8) -> Gf256 {
    EXP_TABLE[n as usize].into()
}

fn log(n: u8) -> u8 {
    LOG_TABLE[n as usize]
}

impl Deref for Gf256 {
    type Target = u8;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl Add for Gf256 {
    type Output = Gf256;

    #[allow(clippy::suspicious_arithmetic_impl)]
    fn add(self, rhs: Gf256) -> Gf256 {
        Gf256(self.0 ^ rhs.0)
    }
}

#[allow(clippy::suspicious_op_assign_impl)]
impl AddAssign for Gf256 {
    fn add_assign(&mut self, rhs: Gf256) {
        self.0 ^= rhs.0;
    }
}

impl Sub for Gf256 {
    type Output = Gf256;

    #[allow(clippy::suspicious_arithmetic_impl)]
    fn sub(self, rhs: Gf256) -> Gf256 {
        Gf256(self.0 ^ rhs.0)
    }
}

impl Mul for Gf256 {
    type Output = Self;

    fn mul(self, rhs: Self) -> Self {
        if self.0 == 0 || rhs.0 == 0 {
            Self(0)
        } else {
            let log_x = LOG_TABLE[self.0 as usize] as usize;
            let log_y = LOG_TABLE[rhs.0 as usize] as usize;
            EXP_TABLE[log_x + log_y].into()
        }
    }
}

#[allow(clippy::suspicious_arithmetic_impl)]
impl Div for Gf256 {
    type Output = Self;

    fn div(self, rhs: Self) -> Self {
        if rhs.0 == 0 {
            panic!("Division by zero");
        }

        self * rhs.inv().unwrap()
    }
}

fn _gf256_mul(a: Gf256, b: Gf256, poly: u16) -> Gf256 {
    let mut x = a.0;
    let mut y = b.0 as u16;
    let mut z = 0u8;
    while x != 0 {
        if x & 1 != 0 {
            z ^= y as u8;
        }
        x >>= 1;
        y <<= 1;
        if y & 0x100 != 0 {
            y ^= poly;
        }
    }

    Gf256(z)
}

// For reference, the lookup tables were generated using the following code:
fn _lookup_table_create() -> ([u8; 512], [u8; 256]) {
    let mut exp = [0u8; 512];
    let mut log = [0u8; 256];
    // Irreducible polynomial for GF(256)
    let poly = 0x11d;

    let mut x = 1;
    for i in 0..255 {
        exp[i] = x;
        exp[i + 255] = x;
        log[x as usize] = i as u8;
        x = _gf256_mul(x.into(), 2.into(), poly).0;
    }

    // Make it 512
    exp[510] = 1;
    exp[511] = 2;

    (exp, log)
}

impl From<u8> for Gf256 {
    fn from(x: u8) -> Self {
        Gf256(x)
    }
}

#[cfg(feature = "zeroize")]
impl Zeroize for Gf256 {
    fn zeroize(&mut self) {
        self.0.zeroize();
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generator_proves_multiplication() {
        // Test that 2 is a generator (primitive element) that generates all non-zero elements
        let generator = Gf256(2);
        let mut generated = std::collections::HashSet::new();
        let mut current = Gf256::ONE;

        for _ in 0..255 {
            generated.insert(current.0);
            current = current * generator;
        }

        // Should generate exactly 255 distinct non-zero elements
        assert_eq!(generated.len(), 255);
        assert!(!generated.contains(&0));

        // Verify we generated all non-zero elements 1..255
        for i in 1..=255u8 {
            assert!(
                generated.contains(&i),
                "Generator did not produce {}",
                i
            );
        }
    }

    #[test]
    fn test_basic_properties() {
        assert_eq!(Gf256::ZERO.0, 0);
        assert_eq!(Gf256::ONE.0, 1);

        for i in 1..=255 {
            // Test basic identities and properties
            assert_eq!(Gf256(i) + Gf256::ZERO, Gf256(i));
            assert_eq!(Gf256(i) * Gf256::ZERO, Gf256::ZERO);
            assert_eq!(Gf256(i) * Gf256::ONE, Gf256(i));
            assert_eq!(Gf256(i) - Gf256::ZERO, Gf256(i));
        }
    }

    #[test]
    fn test_inverse() {
        // Test that a * a^(-1) = 1 for all values
        for a in 1..=255 {
            let gf_a = Gf256(a);
            if let Some(inv_a) = gf_a.inv() {
                assert_eq!(gf_a * inv_a, Gf256::ONE);
            } else {
                panic!("Element {} should have an inverse", a);
            }
        }

        // Test that 0 has no inverse
        assert_eq!(Gf256::ZERO.inv(), None);
    }
}
